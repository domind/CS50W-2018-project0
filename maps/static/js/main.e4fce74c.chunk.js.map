{"version":3,"sources":["viewport_center_zoom_calc.js","icons.js","App.js","serviceWorker.js","index.js"],"names":["getBaseLog","x","y","Math","log","viewport_center_zoom_calc","pointsArray","map_height","map_width","points","i","length","concat","min_lat","min","apply","map","max_lat","max","min_lng","max_lng","lat","lng","diff_lat","zoom_calc_lat","abs","diff_lng","cos","PI","zoom_calc_lng","zoom_calc","trunc","center","zoom","iconMarkup","renderToStaticMarkup","style","color","className","greenMarker","divIcon","html","iconAnchor","iconMarkup2","redMarker","iconMarkup3","circleMarker","iconMarkup4","blueMarker","DEFAULT_VIEWPORT","App","props","onViewportChanged","viewport","setState","handleChangeComplete","col","lineColorNew","hex","colors","state","originalColors","lineColors","indexOf","handleClick","displayColorPicker","handleClose","parseKML","e","xarray","xmlDoc","DOMParser","parseFromString","lineNamesRead","colorRead","placemarks","querySelectorAll","placemark","parentElement","nodeName","push","querySelector","firstChild","nodeValue","styleCheck","getElementById","replace","slice","arrPoints","childNodes","split","Number","lineNames","height","width","showFile","a","text","reader","FileReader","onload","target","result","file","readAsText","handleDivide","includes","selectedPoint","alert","allLines","lineNumber","selectedLine","selectedPointPosition","firstPart","secondPart","newLineNames","newLineColors","floor","random","getRandomColor","handleReverse","pathNumber","reverse","handleSave","xml","toString","element","document","createElement","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","window","innerWidth","innerHeight","files","bind","polylineClick","pointClick","updateWindowDimensions","this","addEventListener","removeEventListener","idName","options","selectedLineIndex","newColors","pointPosition","pointPositionArray","_latlng","pointsToDisplay","index","Marker","key","position","icon","onClick","Container","Row","Col","textAlign","xs","ref","pond","allowMultiple","maxFiles","onupdatefiles","fileItems","console","fileItem","Table","bordered","backgroundColor","Button","size","variant","zIndex","top","right","bottom","left","disableAlpha","onChangeComplete","Map","TileLayer","attribution","url","Polyline","positions","React","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4fce74c.chunk.js","sourcesContent":["function getBaseLog(x, y) {\r\n    return Math.log(y) / Math.log(x);\r\n}\r\n\r\nexport function viewport_center_zoom_calc(pointsArray, map_height, map_width) {\r\n    let points=[];\r\n    for (let i=0; i<pointsArray.length; i++){\r\n      points=points.concat(pointsArray[i])\r\n    }\r\n\r\n\r\n    let min_lat = Math.min.apply(Math, points.map(function (i) { return i[0]; }))\r\n    let max_lat = Math.max.apply(Math, points.map(function (i) { return i[0]; }))\r\n    let min_lng = Math.min.apply(Math, points.map(function (i) { return i[1]; }))\r\n    let max_lng = Math.max.apply(Math, points.map(function (i) { return i[1]; }))\r\n    let lat = (min_lat + max_lat) / 2\r\n    let lng = (min_lng + max_lng) / 2\r\n\r\n    let diff_lat = (min_lat - max_lat) * 1852 * 60 / map_height\r\n    let zoom_calc_lat = getBaseLog(2, 156412 / Math.abs(diff_lat))\r\n\r\n    let diff_lng =  Math.cos(lat * Math.PI / 180)*(min_lng - max_lng) * 1852 * 60 / map_width \r\n    let zoom_calc_lng = getBaseLog(2, 156412 / Math.abs(diff_lng))\r\n\r\n    let zoom_calc = Math.trunc(zoom_calc_lat > zoom_calc_lng ? zoom_calc_lng : zoom_calc_lat-1)\r\n    if (zoom_calc>20) { zoom_calc=20}\r\n    if (zoom_calc<0) {zoom_calc=0 }\r\n    return { center: [lat, lng], zoom: zoom_calc }\r\n}","import React from 'react';\r\nimport { divIcon } from 'leaflet';\r\nimport { renderToStaticMarkup } from 'react-dom/server';\r\n\r\nconst iconMarkup = renderToStaticMarkup(<i style={{ color: \"green\" }} className=\" fa fa-map-marker-alt fa-3x\" />);\r\nexport const greenMarker = divIcon({\r\n  html: iconMarkup,\r\n  iconAnchor: [13, 38],\r\n});\r\n\r\nconst iconMarkup2 = renderToStaticMarkup(<i style={{ color: \"red\" }} className=\" fa fa-map-marker-alt fa-3x\" />);\r\nexport const redMarker = divIcon({\r\n  html: iconMarkup2,\r\n  iconAnchor: [13, 38],\r\n});\r\nconst iconMarkup3 = renderToStaticMarkup(<i style={{ color: \"red\" }} className=\"fas fa-dot-circle\" />);\r\nexport const circleMarker = divIcon({\r\n  html: iconMarkup3,\r\n  iconAnchor: [6, 8],\r\n});\r\nconst iconMarkup4 = renderToStaticMarkup(<i style={{ color: \"blue\" }} className=\" fa fa-map-marker-alt fa-3x\" />);\r\nexport const blueMarker = divIcon({\r\n  html: iconMarkup4,\r\n  iconAnchor: [13, 38],\r\n});\r\n\r\nexport function getRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }","import React from \"react\";\nimport { Map, TileLayer, Marker, Polyline } from \"react-leaflet\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Table from \"react-bootstrap/Table\";\nimport Col from \"react-bootstrap/Col\";\nimport { FilePond } from \"react-filepond\";\nimport { viewport_center_zoom_calc } from \"./viewport_center_zoom_calc\";\nimport { SketchPicker } from \"react-color\";\nimport {\n  greenMarker,\n  redMarker,\n  circleMarker,\n  blueMarker,\n  getRandomColor\n} from \"./icons\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"filepond/dist/filepond.min.css\";\n\nconst DEFAULT_VIEWPORT = {\n  center: [34.6638506, 32.9142967],\n  zoom: 13\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: DEFAULT_VIEWPORT,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      file: \"\",\n      files: \"\",\n      points: [],\n      lineNames: [],\n      lineColors: [],\n      originalColors: [],\n      selectedPoint: [],\n      displayColorPicker: false,\n      lineColorNew: \"#000000\"\n    };\n    this.handleSave = this.handleSave.bind(this);\n    this.handleReverse = this.handleReverse.bind(this);\n    this.handleDivide = this.handleDivide.bind(this);\n    this.polylineClick = this.polylineClick.bind(this);\n    this.pointClick = this.pointClick.bind(this);\n    this.handleChangeComplete = this.handleChangeComplete.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n  /*\n  handleInit() {\n    console.log(\"FilePond instance has initialised\", this.pond);\n  }\n*/\n  /*------Following window size-------------------------------------------*/\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n  /*------Following map changes-------------------------------------------*/\n\n  onViewportChanged = viewport => {\n    // The viewport got changed by the user, keep track in state\n    this.setState({ viewport });\n  };\n\n  /*------Color picker-------------------------------------------*/\n  handleChangeComplete = col => {\n    this.setState({ lineColorNew: col.hex });\n    let colors = this.state.originalColors;\n    colors[this.state.lineColors.indexOf(\"selected\")] = this.state.lineColorNew;\n    this.setState({ originalColors: colors });\n  };\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\n  };\n  handleClose = () => {\n    this.setState({ displayColorPicker: false });\n  };\n\n  /*------Parse KML file-------------------------------------------*/\n\n  parseKML = e => {\n    let parser = new DOMParser();\n    let xarray = [];\n    let xmlDoc = parser.parseFromString(e, \"text/xml\");\n    let lineNamesRead = [];\n    let colorRead = [];\n    let placemarks = xmlDoc.querySelectorAll(\"Placemark LineString \");\n\n    for (\n      let x = 0;\n      x < xmlDoc.querySelectorAll(\"Placemark  LineString\").length;\n      x++\n    ) {\n      let placemark;\n\n      if (placemarks[x].parentElement.nodeName === \"MultiGeometry\") {\n        placemark = placemarks[x].parentElement.parentElement;\n      } else {\n        placemark = placemarks[x].parentElement;\n      }\n\n      lineNamesRead.push(placemark.querySelector(\"name\").firstChild.nodeValue);\n\n      let styleCheck = xmlDoc\n        .getElementById(\n          placemark\n            .querySelector(\"styleUrl\")\n            .firstChild.nodeValue.replace(\"#\", \"\")\n        )\n        .querySelector(\"styleUrl\")\n        .firstChild.nodeValue.replace(\"#\", \"\");\n      colorRead.push(\n        \"#\" +\n          xmlDoc\n            .getElementById(styleCheck)\n            .querySelector(\"color\")\n            .firstChild.nodeValue.slice(2)\n      );\n\n      let myPoints = xmlDoc\n        .querySelectorAll(\"LineString coordinates\")\n        [x].childNodes[0].nodeValue.replace(/(\\r\\n|\\n|\\r|\\t)/gm, \"\");\n      let arrPoints = myPoints.split(/[ ,]+/);\n      xarray[x] = [];\n      for (let i = 0; i < arrPoints.length / 3 - 1; i++) {\n        xarray[x][i] = [Number(arrPoints[i * 3 + 1]), Number(arrPoints[i * 3])];\n      }\n    }\n    this.setState({\n      points: xarray,\n      lineNames: lineNamesRead,\n      lineColors: colorRead,\n      originalColors: colorRead\n    });\n    this.setState({\n      viewport: viewport_center_zoom_calc(\n        xarray,\n        this.state.height - 150,\n        this.state.width / 2\n      )\n    });\n  };\n  /*------Read file-------------------------------------------*/\n  showFile = async e => {\n    let text = \"\";\n    const reader = new FileReader();\n    reader.onload = async e => {\n      text = e.target.result;\n      this.setState({ file: text }, () => {\n        this.parseKML(this.state.file);\n      });\n    };\n    reader.readAsText(e[0].file);\n  };\n  /*------Select path-------------------------------------------*/\n  polylineClick(e) {\n    const idName = e.target.options.idName;\n    let selectedLineIndex = idName.slice(0, idName.indexOf(\"#\"));\n    if (this.state.lineColors[selectedLineIndex] === \"selected\") {\n      this.setState({\n        lineColors: this.state.originalColors,\n        selectedPoint: [], //remove selection\n        newLineColors: \"white\"\n      });\n    } else {\n      let newColors = [...this.state.originalColors];\n      newColors[selectedLineIndex] = \"selected\";\n      this.setState({\n        lineColors: newColors,\n        lineColorNew: this.state.originalColors[selectedLineIndex] // set selection\n      });\n    }\n  }\n  /*------Select point-------------------------------------------*/\n  pointClick(e) {\n    let pointPositionArray = [e.target._latlng.lat, e.target._latlng.lng];\n    let pointPosition;\n    for (\n      let i = 0;\n      i < this.state.points[this.state.lineColors.indexOf(\"selected\")].length;\n      i++\n    ) {\n      if (\n        this.state.points[this.state.lineColors.indexOf(\"selected\")][i][1] ===\n          pointPositionArray[1] &&\n        this.state.points[this.state.lineColors.indexOf(\"selected\")][i][0] ===\n          pointPositionArray[0]\n      ) {\n        pointPosition = i;\n        break;\n      }\n    }\n    this.setState({\n      selectedPoint: [this.state.lineColors.indexOf(\"selected\"), pointPosition]\n    });\n  }\n  /*------Divide path-------------------------------------------*/\n  handleDivide = () => {\n    if (!this.state.lineColors.includes(\"selected\")) {\n      alert(\"select path and division point\");\n    } else {\n      if (this.state.selectedPoint.length === 0) {\n        alert(\"select division point\");\n      } else {\n        let allLines = this.state.points;\n        const lineNumber = this.state.lineColors.indexOf(\"selected\");\n        const selectedLine = this.state.points[lineNumber];\n        const selectedPointPosition = this.state.selectedPoint[1];\n        let firstPart = selectedLine.slice(0, selectedPointPosition + 1);\n        let secondPart = selectedLine.slice(selectedPointPosition);\n        allLines[lineNumber] = firstPart;\n        allLines.push(secondPart);\n        let newLineNames = this.state.lineNames;\n        newLineNames.push(this.state.lineNames[lineNumber] + \"_2\");\n        let newLineColors = this.state.originalColors;\n        newLineColors.push(getRandomColor()); //change color\n        this.setState({\n          points: allLines,\n          lineNames: newLineNames,\n          lineColors: newLineColors,\n          originalColors: newLineColors,\n          selectedPoint: []\n        });\n      }\n    }\n  };\n  /*------Reverse path-------------------------------------------*/\n  handleReverse = () => {\n    if (this.state.lineColors.includes(\"selected\")) {\n      const pathNumber = this.state.lineColors.indexOf(\"selected\");\n      let x = this.state.points;\n      x[pathNumber].reverse();\n      this.setState({ points: x, selectedPoint: [] });\n    } else {\n      alert(\"Please select path\");\n    }\n  };\n  /*------Save path-------------------------------------------*/\n\n  handleSave = () => {\n    if (this.state.lineColors.includes(\"selected\")) {\n      const pathNumber = this.state.lineColors.indexOf(\"selected\");\n      let xml =\n        '<?xml version=\"1.0\" encoding=\"UTF-8\"?><kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\" xmlns:kml=\"http://www.opengis.net/kml/2.2\" xmlns:atom=\"http://www.w3.org/2005/Atom\"><Document><name>' +\n        this.state.lineNames[pathNumber] +\n        '</name><StyleMap id=\"msn_ylw-pushpin92\"><Pair><key>normal</key><styleUrl>#sn_ylw-pushpin10</styleUrl></Pair></StyleMap><Style id=\"sn_ylw-pushpin10\"><LineStyle><color>ff' +\n        this.state.originalColors[pathNumber].replace(\"#\", \"\") +\n        \"</color><width>4</width></LineStyle></Style><Placemark><name>\" +\n        this.state.lineNames[pathNumber] +\n        \"</name><open>1</open><styleUrl>#msn_ylw-pushpin92</styleUrl><LineString><tessellate>1</tessellate><coordinates>\" +\n        this.state.points[pathNumber]\n          .map(x => x[1] + \",\" + x[0] + \",0 \")\n          .toString()\n          .replace(/0 ,/g, \"0 \") +\n        \"</coordinates></LineString></Placemark></Document></kml>\";\n      const element = document.createElement(\"a\");\n      const file = new Blob([xml], { type: \"xml/plain\" });\n      element.href = URL.createObjectURL(file);\n      element.download = this.state.lineNames[pathNumber] + \".kml\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    } else {\n      alert(\"Please select path\");\n    }\n  };\n\n  render() {\n    /*------For color picker-------------------------------------------*/\n    const popover = {\n      position: \"absolute\",\n      zIndex: \"2\"\n    };\n    const cover = {\n      position: \"fixed\",\n      top: \"0px\",\n      right: \"0px\",\n      bottom: \"0px\",\n      left: \"0px\"\n    };\n\n    /*------Create points path-------------------------------------------*/\n    let pointsToDisplay;\n    if (this.state.lineColors.includes(\"selected\")) {\n      const pathNumber = this.state.lineColors.indexOf(\"selected\");\n      pointsToDisplay = this.state.points[pathNumber].map((x, index) => (\n        <Marker\n          key={index}\n          position={x}\n          icon={circleMarker}\n          onClick={this.pointClick}\n        />\n      ));\n\n      pointsToDisplay[0] = (\n        <Marker\n          key={0}\n          position={this.state.points[pathNumber][0]}\n          icon={greenMarker}\n        />\n      );\n      pointsToDisplay[pointsToDisplay.length - 1] = (\n        <Marker\n          key={pointsToDisplay.length - 1}\n          position={this.state.points[pathNumber][pointsToDisplay.length - 1]}\n          icon={redMarker}\n        />\n      );\n    }\n\n    return (\n      <Container>\n        <Row>\n          <Col style={{ textAlign: \"center\" }}>\n            <h1>KML path editor</h1>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={4}>\n            <Row>\n              <Col>\n                Upload your klm file here\n                <FilePond\n                  ref={ref => (this.pond = ref)}\n                  files={this.state.files}\n                  allowMultiple={false}\n                  maxFiles={1}\n                  //oninit={() => this.handleInit()}\n                  onupdatefiles={fileItems => {\n                    if (fileItems.length === 0) {\n                      console.log(\"empty\");\n                      this.setState({\n                        file: \"\",\n                        files: \"\",\n                        points: [],\n                        lineColors: [],\n                        originalColors: [],\n                        selectedPoint: [],\n                        lineNames: []\n                      });\n                    } else {\n                      this.showFile(fileItems);\n                      // Set currently active file objects to this.state\n                      this.setState({\n                        files: fileItems.map(fileItem => fileItem.file)\n                      });\n                    }\n                  }}\n                />\n              </Col>\n            </Row>\n\n            <Row>\n              <br></br>\n            </Row>\n            {this.state.lineNames.length > 0 ? (\n              <div>\n                List of paths:\n                <Row>\n                  <Col>\n                    <Table bordered>\n                      {this.state.lineNames.map((x, index) => (\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor: this.state.originalColors[index]\n                            }}\n                            key={index}\n                          />\n                          <td>\n                            {this.state.lineColors[index] === \"selected\" ? (\n                              <b>{x}</b>\n                            ) : (\n                              x\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </Table>\n                  </Col>\n                </Row>\n                {!this.state.lineColors.includes(\"selected\") ? (\n                  \"Select path you want to change or save\"\n                ) : (\n                  <div>\n                    Actions for selected line\n                    <Row>\n                      <Col xs={4}>\n                        <div>\n                          <Button\n                            onClick={this.handleClick}\n                            size=\"sm\"\n                            variant=\"outline-dark\"\n                          >\n                            Pick Color\n                          </Button>\n                          {this.state.displayColorPicker ? (\n                            <div style={popover}>\n                              <div style={cover} onClick={this.handleClose} />\n                              <SketchPicker\n                                color={this.state.lineColorNew}\n                                disableAlpha={true}\n                                onChangeComplete={this.handleChangeComplete}\n                              />\n                            </div>\n                          ) : null}\n                        </div>\n                      </Col>\n                      <Col xs={2}></Col>\n                      <Col xs={4}>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline-dark\"\n                          onClick={this.handleReverse}\n                        >\n                          Reverse\n                        </Button>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <br />\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col xs={4}>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline-dark\"\n                          onClick={this.handleDivide}\n                        >\n                          Divide\n                        </Button>\n                      </Col>\n                      <Col xs={2}></Col>\n                      <Col xs={4}>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline-primary\"\n                          onClick={this.handleSave}\n                        >\n                          Save\n                        </Button>\n                      </Col>\n\n                      <Col>\n                        <br />\n                      </Col>\n                    </Row>\n                    <Row></Row>\n                  </div>\n                )}\n              </div>\n            ) : (\n              \" \"\n            )}\n          </Col>\n          <Col xs={8}>\n            <Map\n              onViewportChanged={this.onViewportChanged}\n              style={{\n                height:\n                  this.state.height - 150 > 150 ? this.state.height - 150 : 150,\n                width: this.state.width / 2\n              }}\n              viewport={this.state.viewport}\n            >\n              <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n              <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n              {this.state.points.map((x, index) => (\n                <div key={index}>\n                  <Polyline\n                    key={index}\n                    color={this.state.originalColors[index]}\n                    width={3}\n                    idName={\n                      index +\n                      \"#\" +\n                      this.state.lineNames[index].replace(/ /g, \"\")\n                    }\n                    positions={[...x]}\n                    onClick={this.polylineClick}\n                  ></Polyline>\n                </div>\n              ))}\n              {pointsToDisplay}\n              {this.state.selectedPoint.length !== 0 ? (\n                <Marker\n                  position={\n                    this.state.points[this.state.selectedPoint[0]][\n                      this.state.selectedPoint[1]\n                    ]\n                  }\n                  icon={blueMarker}\n                />\n              ) : (\n                \"\"\n              )}\n            </Map>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}