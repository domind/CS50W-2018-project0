{"version":3,"sources":["task.js","addTask.js","column.js","styleConst.js","addColumn.js","App.js","serviceWorker.js","index.js"],"names":["getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","color","boxShadow","borderRadius","Task","props","openEdit","bind","deleteTask","e","stopPropagation","this","elementEdit","item","id","content","key","draggableId","index","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","onClick","action","actionName","actionItem","defaultValue","onChange","target","value","Row","Col","sm","icon","faEdit","overflow","width","whiteSpace","textOverflow","faTrashAlt","React","Component","addTaskStyle","backgroundColor","AddTask","clickAdd","Button","columnStyle","fontWeight","fontSize","textAlign","Column","takskEdited","actionToDo","text","column","deleteCol","editCol","title","border","height","tasks","length","getListStyle2","minHeight","droppableId","map","placeholder","addColStyle","AddColumn","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","findIndex","indexOf","getListStyle","display","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","writeUserData","Firebase","database","set","state","console","log","getUserData","on","retrived","val","i","undefined","setState","onDragEnd","source","destination","slice","sourceColumn","destColumn","colMinHeight","Math","max","initializeApp","window","innerWidth","innerHeight","colNumber","updateWindowDimensions","addEventListener","removeEventListener","columnId","data","columnNo","maxColId","apply","parseInt","push","editingCol","editingColId","columns","myColumn","taskNo","maxTaskId","helpWithNoTasksCase","task","someStyle","minWidth","Container","direction","type","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d0b0f5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport \"./bootstrap.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit,faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  // change background colour if dragging\r\n  background: isDragging ? \"rgba(238, 232, 170,0.7) \" : \"rgb(238, 232, 170, 0.95)\",\r\n  color: \"blue\",\r\n  boxShadow: \"10px 10px 5px MidnightBlue  \",\r\n  borderRadius: 5,\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nexport default class Task extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.openEdit = this.openEdit.bind(this);\r\n    this.deleteTask = this.deleteTask.bind(this);\r\n  }\r\ndeleteTask(e){\r\n  e.stopPropagation();\r\n  this.props.elementEdit(this.props.item.id, \"TaskDelete\", this.props.item.content);\r\n}\r\n  openEdit(e) {\r\n    e.stopPropagation();\r\n    this.props.elementEdit(this.props.item.id, \"TaskEdit\", this.props.item.content);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Draggable\r\n        key={this.props.item.id}\r\n        draggableId={this.props.item.id}\r\n        index={this.props.index}\r\n      >\r\n        {(provided, snapshot) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            style={getItemStyle(\r\n              snapshot.isDragging,\r\n              provided.draggableProps.style\r\n            )}\r\n            onClick={() => this.props.elementEdit(\"\", false)}\r\n          >\r\n            {\" \"}\r\n            {this.props.action.actionName===\"TaskEdit\" &&\r\n            this.props.action.actionItem === this.props.item.id ? (\r\n              <div>\r\n                <input\r\n                  defaultValue={this.props.item.content}\r\n                  onChange={e =>\r\n                    this.props.elementEdit(\r\n                      this.props.item.id,\r\n                      this.props.action.actionName,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                  onClick={e => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <Row>\r\n                 <Col sm={2} >\r\n                  <FontAwesomeIcon\r\n                    id={this.props.item.id}\r\n                    onClick={this.openEdit}\r\n                    icon={faEdit}\r\n                  />\r\n                </Col>\r\n                <Col\r\n                  sm={8}\r\n                  style={{\r\n                    overflow: \"hidden\",\r\n                    width: 100,\r\n                    whiteSpace: \"nowrap\",\r\n                    textOverflow: \"ellipsis\",\r\n                   // border:\"solid\",\r\n                  }}\r\n                >\r\n                  {this.props.item.content + \" \"}\r\n                </Col>\r\n                <Col sm={2} >\r\n                  <FontAwesomeIcon\r\n                    id={this.props.item.id}\r\n                    onClick={this.deleteTask}\r\n                    icon={faTrashAlt}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst grid = 8;\r\nconst addTaskStyle = {\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: \"10px 10px 5px MidnightBlue  \",\r\n  backgroundColor: \"rgb(238, 232, 170, 0.95)\",\r\n // color: \"green\"\r\n color: \"blue\",\r\n};\r\n\r\nclass AddTask extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.clickAdd = this.clickAdd.bind(this);\r\n  }\r\n  clickAdd(e) {\r\n    e.stopPropagation();\r\nthis.props.elementEdit(\"\", \"TaskAdd\")\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button style={addTaskStyle} onClick={this.clickAdd}>\r\n          + Add task\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddTask;\r\n","import React from \"react\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Task from \"./task\";\r\nimport AddTask from \"./addTask\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { grid, colWidth } from \"./styleConst\";\r\n\r\nconst columnStyle = {\r\n  fontWeight: \"bold\",\r\n  fontSize: \"x-large\",\r\n  color: \"white \",\r\n  textAlign: \"center\"\r\n};\r\n\r\nexport default class Column extends React.Component {\r\n\r\n  /*------------------------------------------------------------*/\r\n  elementEdit = (takskEdited, actionToDo, text) => {\r\n   this.props.elementEdit(takskEdited, actionToDo, text, this.props.column.id);\r\n  };\r\n  /*------------------------------------------------------------*/\r\n\r\n  deleteCol = () => {\r\n    this.props.elementEdit( \"\", \"ColDelete\",\"\" ,this.props.column.id);\r\n  };\r\n  editCol = e => {\r\n    e.stopPropagation();\r\n    let text = this.props.column.title;\r\n    this.props.elementEdit(\"\", \"ColEdit\", text, this.props.column.id);\r\n  };\r\n  /*------------------------------------------------------------*/\r\n  render() {\r\n  \r\n    const getItemStyle = (isDragging, draggableStyle) => ({\r\n      // some basic styles to make the items look a bit nicer\r\n      border: \"solid DarkSlateBlue   \",\r\n      userSelect: \"none\",\r\n      padding: grid * 2,\r\n      margin: 10,\r\n      boxShadow: \"10px 10px 5px MidnightBlue  \",\r\n      // change background opacity if dragging\r\n      background: isDragging\r\n        ? \" rgba(100, 149, 237,0.5)\"\r\n        : \"  rgba(100, 149, 237,1)  \",\r\n      borderRadius: 5,\r\n      \r\n      height: 65 * (this.props.column.tasks.length + 1) + 80,\r\n      // styles we need to apply on draggables\r\n      ...draggableStyle\r\n    });\r\n\r\n    const getListStyle2 = {\r\n      padding: grid,\r\n      width: colWidth,\r\n      minHeight: 40\r\n    };\r\n    return (\r\n      <Draggable\r\n        key={this.props.column.id}\r\n        draggableId={this.props.column.id}\r\n        index={this.props.index}\r\n      >\r\n        {(provided, snapshot) => (\r\n          <div\r\n            onClick={() => this.props.elementEdit(\"\", false)}\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            style={getItemStyle(\r\n              snapshot.isDragging,\r\n              provided.draggableProps.style\r\n            )}\r\n          >\r\n            <Droppable droppableId={\"droppable\" + this.props.index}>\r\n              {(provided, snapshot) => (\r\n                <div>\r\n                  <div style={columnStyle}>\r\n                    <Row>\r\n                      {this.props.action.actionName===\"ColEdit\" &&\r\n                      this.props.action.actionItem === this.props.column.id ? (\r\n                        <input\r\n                          defaultValue={this.props.column.title}\r\n                          onChange={e =>\r\n                            this.props.elementEdit(\r\n                              \"\",\r\n                              \"ColEdit\",\r\n                              e.target.value,\r\n                              this.props.column.id\r\n                            )\r\n                          }\r\n                          onClick={e => {\r\n                            e.stopPropagation();\r\n                          }}\r\n                        ></input>\r\n                      ) : (\r\n                        <>\r\n                          <Col sm={2}>\r\n                            <FontAwesomeIcon\r\n                              onClick={this.editCol}\r\n                              icon={faEdit}\r\n                            />\r\n                          </Col>\r\n                          <Col sm={8}>\r\n                            {this.props.column.title\r\n                              ? this.props.column.title\r\n                              : '\"\"'}\r\n                          </Col>\r\n                          <Col sm={2}>\r\n                            <FontAwesomeIcon\r\n                              onClick={this.deleteCol}\r\n                              icon={faTrashAlt}\r\n                            />\r\n                          </Col>\r\n                        </>\r\n                      )}\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <div ref={provided.innerRef} style={getListStyle2}>\r\n                    {this.props.column.tasks.map((item, index) => (\r\n                      <Task\r\n                        key={index}\r\n                        item={item}\r\n                        index={index}\r\n                        elementEdit={this.elementEdit}\r\n                        action={this.props.action}\r\n                      />\r\n                    ))}\r\n                    {provided.placeholder}\r\n                    <AddTask elementEdit={this.elementEdit} />\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\n","export const grid =8;\r\nexport const colWidth = 300;","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {grid,colWidth} from \"./styleConst\"\r\n//const grid = 8;\r\nconst addColStyle = {\r\n  padding: grid * 2,\r\n  margin: 10,\r\n  boxShadow: \"10px 10px 5px MidnightBlue  \",\r\n  backgroundColor: \"rgba(100, 149, 237,1)\",\r\n  color: \"white\",\r\n  width: colWidth,\r\n  minHeight: 40\r\n};\r\n\r\nclass AddColumn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.clickAdd = this.clickAdd.bind(this);\r\n  }\r\n  clickAdd(e) {\r\n    e.stopPropagation();\r\nthis.props.elementEdit(\"\",\"ColAdd\")\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button style={addColStyle} onClick={this.clickAdd}>\r\n          + Add column\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddColumn;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\n//import { initData } from \"./initData\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Column from \"./column\";\r\nimport AddColumn from \"./addColumn\";\r\nimport Firebase from 'firebase';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nconst findIndex = (list, item) => {\r\n  return list\r\n    .map(e => {\r\n      return e.id;\r\n    })\r\n    .indexOf(item);\r\n};\r\n\r\nconst getListStyle = {\r\n  display: \"flex\",\r\n  padding: 5,\r\n  margin: 20,\r\n  color: \"black\"\r\n};\r\nconst config ={\r\n  apiKey: \"AIzaSyCmrU0AuRpNGPRsD2-JjQ5os7gPjKGxHMo\",\r\n  authDomain: \"tribal-drake-257712.firebaseapp.com\",\r\n  databaseURL: \"https://tribal-drake-257712.firebaseio.com\",\r\n  projectId: \"tribal-drake-257712\",\r\n  storageBucket: \"tribal-drake-257712.appspot.com\",\r\n  messagingSenderId: \"577742396333\",\r\n  appId: \"1:577742396333:web:8a52c828c3edb5de21df24\"\r\n\r\n}\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    Firebase.initializeApp(config);\r\n    this.state = {\r\n      column: [],\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n      colMinHeight: 6,\r\n      colNumber: 4,\r\n      action: { actionName: \"\", actionItem: \"\" }\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    this.elementEdit = this.elementEdit.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n    this.getUserData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  writeUserData = () => {\r\n    Firebase.database().ref('/columns').set(this.state.column);\r\n    console.log('DATA SAVED');\r\n  }\r\n  getUserData = () => {\r\n    let ref = Firebase.database().ref('/columns');\r\n    ref.on('value', snapshot => {\r\n      let retrived = snapshot.val();\r\n      if (retrived===null) retrived=[]; else\r\n      {for (let i =0; i<retrived.length; i++)\r\n      {if (retrived[i].tasks===undefined ) retrived[i].tasks=[];\r\n      }\r\n      }\r\n      \r\n      this.setState({column : retrived},//() => console.log(this.state)\r\n      );\r\n    });\r\n    console.log('DATA RETRIEVED');\r\n  }\r\n  /*------------------------------------------------------------*/\r\n  elementEdit(id, actionToDo, text, columnId) {\r\n    let data = this.state.column;\r\n\r\n\r\n    let columnNo = findIndex(data, columnId);\r\n    switch (actionToDo) {\r\n      case \"ColAdd\":\r\n          let  maxColId\r\n        if (data.length===0) maxColId = 0; else\r\n        maxColId = Math.max.apply(\r\n          null,\r\n          data.map(column => {\r\n            return parseInt(column.id.slice(3));\r\n          })\r\n        );\r\n        data.push({ id: \"col\" + (maxColId + 1), title: \"\", tasks: [] });\r\n\r\n        this.setState(\r\n          {\r\n            action: {\r\n              actionName: \"ColEdit\",\r\n              actionItem: \"col\" + (maxColId + 1)\r\n            }\r\n          },\r\n\r\n        );\r\n        break;\r\n      case \"ColEdit\":\r\n        data[columnNo].title = text;\r\n        this.setState({\r\n          column: data,\r\n          editingCol: true,\r\n          editingColId: columnId,\r\n          action: { actionName: \"ColEdit\", actionItem: columnId }\r\n        });\r\n        break;\r\n      case \"ColDelete\":\r\n        data.splice(findIndex(data, columnId), 1);\r\n        break;\r\n      case \"TaskDelete\":\r\n        const columns = this.state.column;\r\n        const myColumn = columns[findIndex(columns, columnId)];\r\n\r\n        myColumn.tasks.splice(findIndex(myColumn.tasks, id), 1);\r\n        //action = false;\r\n        break;\r\n      case \"TaskEdit\":\r\n\r\n        let taskNo = findIndex(data[columnNo].tasks, id);\r\n        data[columnNo].tasks[taskNo].content = text;\r\n        this.setState({ column: data });\r\n        this.setState({\r\n          action: { actionName: actionToDo, actionItem: id }\r\n        });\r\n        break;\r\n      case \"TaskAdd\":\r\n\r\n\r\n        let maxTaskId = Math.max.apply(\r\n          null,\r\n          data.map(columns => {\r\n\r\n            let helpWithNoTasksCase\r\n            if (columns.tasks.length === 0)\r\n              helpWithNoTasksCase = [0];\r\n            else\r\n              helpWithNoTasksCase = columns.tasks.map(task => {\r\n                return parseInt(task.id.slice(4))\r\n              })\r\n\r\n            return Math.max.apply(\r\n              null,\r\n              helpWithNoTasksCase\r\n            )\r\n              ;\r\n          })\r\n        );\r\n       \r\n        data[columnNo].tasks.push({\r\n          id: \"task\" + (maxTaskId + 1),\r\n          content: \"\"\r\n        });\r\n        this.setState(\r\n          {\r\n            column: data,\r\n \r\n            action: {\r\n              actionName: \"TaskEdit\",\r\n              actionItem: \"task\" + (maxTaskId + 1)\r\n            }\r\n          },\r\n\r\n        );\r\n        break;\r\n      default:\r\n        this.setState({ action: { actionName: \"\", actionItem: \"\" } });\r\n        break;\r\n    }\r\n\r\n    this.setState({ column: data });\r\n    this.writeUserData()\r\n  }\r\n  /*------------------------------------------------------------*/\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === \"board\") {\r\n      let column = this.state.column;\r\n      const columnMoved = reorder(\r\n        this.state.column,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      column = columnMoved;\r\n      this.setState({\r\n        column\r\n      });\r\n    } else {\r\n      if (source.droppableId === destination.droppableId) {\r\n        const column = this.state.column;\r\n        const tasks = reorder(\r\n          this.state.column[source.droppableId.slice(9)].tasks,\r\n          result.source.index,\r\n          result.destination.index\r\n        );\r\n        column[source.droppableId.slice(9)].tasks = tasks;\r\n        this.setState({ tasks });\r\n      } else {\r\n        let column = this.state.column;\r\n\r\n        const sourceColumn = Array.from(\r\n          column[source.droppableId.slice(9)].tasks\r\n        ); //source.droppableId.slice(9)\r\n        const destColumn = Array.from(\r\n          column[destination.droppableId.slice(9)].tasks\r\n        );\r\n\r\n        const [removed] = sourceColumn.splice(source.index, 1);\r\n        destColumn.splice(destination.index, 0, removed);\r\n        column[source.droppableId.slice(9)].tasks = sourceColumn;\r\n        column[destination.droppableId.slice(9)].tasks = destColumn;\r\n\r\n        this.setState({\r\n          column\r\n        });\r\n\r\n        this.setState({\r\n          colMinHeight: Math.max(\r\n            ...this.state.column.map(column => column.tasks.length)\r\n          )\r\n        });\r\n      }\r\n    }\r\n  };\r\n  /*------------------------------------------------------------*/\r\n  render() {\r\n   \r\n    const someStyle = {\r\n      minHeight: this.state.height,\r\n      minWidth: this.state.colNumber * 358 + 300, // calculating screen width\r\n      background: \"SteelBlue\",\r\n      color: \"white\"\r\n    };\r\n\r\n    return (\r\n      <div\r\n        style={someStyle}\r\n        onClick={() =>\r\n          this.setState({\r\n            editCol: false,\r\n            editingColId: \"\",\r\n            action: { actionName: \"\", actionItem: \"\" }\r\n          })\r\n        }\r\n      >\r\n        <Container style={{ margin: 0 }}>\r\n          <Row>\r\n            <Col style={{ textAlign: \"center\" }}>\r\n              <h1>Testing react-beautiful-dnd</h1>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n              <Droppable\r\n                direction=\"horizontal\"\r\n                droppableId=\"board\"\r\n                type=\"COLUMN\"\r\n              >\r\n                {(provided, snapshot) => (\r\n                  <div>\r\n                    <div ref={provided.innerRef} style={getListStyle}>\r\n                      {this.state.column.map((column, index) => (\r\n                        <Column\r\n                          key={index}\r\n                          column={column}\r\n                          index={index}\r\n                          colMinHeight={this.state.colMinHeight}\r\n                          elementEdit={this.elementEdit}\r\n                          action={this.state.action}\r\n                        />\r\n                      ))}\r\n                      {provided.placeholder}\r\n                      <AddColumn elementEdit={this.elementEdit} />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </DragDropContext>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}