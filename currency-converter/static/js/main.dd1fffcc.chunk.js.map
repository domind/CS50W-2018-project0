{"version":3,"sources":["tools/getLocalForage.js","History.js","api/apiKey.js","MainForm.js","api/defaults.js","Converter.js","tools/convertDate.js","App.js","serviceWorker.js","index.js"],"names":["getLocalForage","Promise","resolve","reject","localForage","getItem","then","value","catch","History","props","history","useHistory","useState","conversionsList","setConversionsList","numberOfConversions","length","useEffect","previousConversions","map","conversion","index","key","className","conversionDate","amountToChange","exchangingFromCurrency","calculatedAmount","exchangingToCurrency","Col","Button","onClick","push","Table","striped","bordered","hover","size","colSpan","variant","setItem","apiKey","MainForm","setAmountToChange","currencyFrom","setCurrencyFrom","currencyTo","setCurrencyTo","setValue","exchangeRate","setExchangeRate","toFixed","a","apiCall","fetch","response","status","json","res","alert","handleCurrencyChange","Row","onSubmit","values","transaction","validate","errors","isNaN","render","handleSubmit","name","input","meta","type","placeholder","component","initialValue","listOfCurrencies","currencies","previous","error","openHistory","Converter","countryList","setCountryList","Object","results","x","id","fetchCountryList","sort","date","current_datetime","Date","getDate","getMonth","parseInt","getFullYear","convertDate","newConversionsList","concat","result","App","Container","path","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.dd1fffcc.chunk.js","sourcesContent":["import localForage from \"localforage\";\n\nexport function getLocalForage() {\n  return new Promise((resolve, reject) => {\n    localForage\n      .getItem(\"savedConversions\")\n      .then((value) => {\n        if (value !== null) resolve(value);\n      })\n      .catch(() => {\n        reject(\"Błąd odczytu histori\");\n      });\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport localForage from \"localforage\";\nimport { getLocalForage } from \"./tools/getLocalForage\";\nimport \"./History.css\";\nimport { Col, Table, Button } from \"react-bootstrap\";\nfunction History(props) {\n  const history = useHistory();\n  const [conversionsList, setConversionsList] = useState([]);\n  const numberOfConversions = conversionsList.length;\n  useEffect(() => {\n    getLocalForage().then((conversionsList) => {\n      setConversionsList(conversionsList);\n    });\n  });\n  const previousConversions = conversionsList.map((conversion, index) => (\n    <tr key={index}>\n      <td className=\"dateColumn\">{conversion.conversionDate}</td>\n      <td>\n        {conversion.amountToChange + \" \" + conversion.exchangingFromCurrency}\n      </td>\n      <td>\n        {conversion.calculatedAmount + \" \" + conversion.exchangingToCurrency}\n      </td>\n    </tr>\n  ));\n  function cleanHistory() {\n    setConversionsList([]);\n    localForage.setItem(\"savedConversions\", []);\n  }\n  return (\n    <Col className=\"history mt-5 p-3  \">\n      <div className=\"historyTitle\">\n        Historia\n        <Button\n          className=\"close\"\n          onClick={() => {\n            history.push(\"/\");\n          }}\n        >\n          X\n        </Button>\n      </div>\n      <Col className=\"tablePlaceholder\">\n        <Table striped bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th className=\"dateColumn\">Data</th>\n              <th>Przed konwersją</th>\n\n              <th>Po konwersji</th>\n            </tr>\n          </thead>\n          <tbody>\n            {numberOfConversions !== 0 ? (\n              previousConversions\n            ) : (\n              <tr>\n                <td colSpan=\"3\">Brak historii konwersji walut</td>\n              </tr>\n            )}\n          </tbody>\n        </Table>\n      </Col>\n      <Button\n        variant=\"light\"\n        className=\"align-self-end cleanHistory\"\n        onClick={() => {\n          cleanHistory();\n        }}\n      >\n        Wyczyść historię\n      </Button>\n    </Col>\n  );\n}\nexport default History;\n","export const apiKey = \"apiKey=321de7bcdde76fe02cf6\";\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { OnChange } from \"react-final-form-listeners\";\nimport \"./MainForm.css\";\nimport { defaultCurrencyFrom, defaultCurrencyTo } from \"./api/defaults\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport { apiKey } from \"./api/apiKey\";\n\nfunction MainForm(props) {\n  const [amountToChange, setAmountToChange] = useState(\"\");\n  const [currencyFrom, setCurrencyFrom] = useState(defaultCurrencyFrom);\n  const [currencyTo, setCurrencyTo] = useState(defaultCurrencyTo);\n  const [value, setValue] = useState(\"\");\n  const [exchangeRate, setExchangeRate] = useState(\"\");\n\n  useEffect(() => {\n    setValue((amountToChange * exchangeRate).toFixed(2));\n  }, [amountToChange, exchangeRate]);\n\n  useEffect(() => {\n    const handleCurrencyChange = async () => {\n      const apiCall =\n        \"https://free.currconv.com/api/v7/convert?q=\" +\n        currencyFrom +\n        \"_\" +\n        currencyTo +\n        \"&compact=ultra&\" +\n        apiKey;\n\n      const response = await fetch(apiCall);\n      if (response.status === 200 || response.status === 304) {\n        response.json().then((res) => {\n          const exchangeRate = res[currencyFrom + \"_\" + currencyTo];\n          setExchangeRate(exchangeRate);\n        });\n      } else {\n        alert(\n          \"Nie udało się wykonać żądanej operacji, ponieważ nie znaleziono zasobu powiązanego z żądaniem\"\n        );\n      }\n    };\n    handleCurrencyChange();\n  }, [currencyFrom, currencyTo]);\n  const handleSubmit = (values) => {\n    const transaction = { ...values, calculatedAmount: value };\n\n    props.onSubmit(transaction);\n  };\n  return (\n    <>\n      <Row>\n        <Col>\n          <Form\n            onSubmit={handleSubmit}\n            validate={(values) => {\n              const errors = {};\n              if (!values.amountToChange) {\n                errors.amountToChange = \"Wpisz wartość\";\n              } else if (isNaN(values.amountToChange)) {\n                errors.amountToChange = \"Nieprawidłowa wartość\";\n              }\n              return errors;\n            }}\n            render={({ handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <Field name=\"amountToChange\">\n                  {({ input, meta }) => (\n                    <div>\n                      <div>\n                        <input\n                          {...input}\n                          type=\"text\"\n                          placeholder=\"Wpisz kwotę\"\n                        />\n                        <Field\n                          name=\"exchangingFromCurrency\"\n                          component=\"select\"\n                          initialValue={currencyFrom}\n                        >\n                          {props.listOfCurrencies.map((currencies) => (\n                            <option key={currencies} value={currencies}>\n                              {currencies}\n                            </option>\n                          ))}\n                        </Field>\n                        <OnChange name=\"exchangingFromCurrency\">\n                          {(value, previous) => {\n                            setCurrencyFrom(value);\n                          }}\n                        </OnChange>\n                      </div>\n\n                      <p className=\"error\">\n                        {meta.error ? meta.error : <br />}\n                      </p>\n                    </div>\n                  )}\n                </Field>\n                <OnChange name=\"amountToChange\">\n                  {(value, previous) => {\n                    setAmountToChange(value);\n                  }}\n                </OnChange>\n                <Field name=\"exchangedAmount\">\n                  {({ input, meta }) => (\n                    <div>\n                      <div>\n                        <input\n                          {...input}\n                          type=\"text\"\n                          placeholder=\"Wynik\"\n                          value={value}\n                          initialValue={value}\n                        />\n                        <Field\n                          name=\"exchangingToCurrency\"\n                          component=\"select\"\n                          initialValue={currencyTo}\n                        >\n                          {props.listOfCurrencies.map((currencies) => (\n                            <option key={currencies} value={currencies}>\n                              {currencies}\n                            </option>\n                          ))}\n                        </Field>\n                        <OnChange name=\"exchangingToCurrency\">\n                          {(value, previous) => {\n                            setCurrencyTo(value);\n                          }}\n                        </OnChange>\n                      </div>\n\n                      <span className=\"error\">{meta.error}</span>\n                    </div>\n                  )}\n                </Field>\n                <br />\n                <br />\n                <Row>\n                  <Col>\n                    <Button type=\"submit\">Konwertuj</Button>\n                  </Col>\n                  <Col>\n                    <Button onClick={() => props.openHistory()}>\n                      Otwórz historię\n                    </Button>\n                  </Col>\n                </Row>\n              </form>\n            )}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n}\nexport default MainForm;\n","export const defaultCurrencyFrom = \"PLN\";\nexport const defaultCurrencyTo = \"USD\";\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport MainForm from \"./MainForm\";\nimport { apiKey } from \"./api/apiKey\";\nimport { convertDate } from \"./tools/convertDate\";\nimport localForage from \"localforage\";\nimport { getLocalForage } from \"./tools/getLocalForage\";\n\nfunction Converter(props) {\n  const history = useHistory();\n  const [countryList, setCountryList] = useState([]);\n\n  useEffect(() => {\n    async function fetchCountryList() {\n      const response = await fetch(\n        \"https://free.currconv.com/api/v7/currencies?&\" + apiKey\n      );\n      if (response.status >= 200 && response.status <= 299) {\n        response\n          .json()\n          .then((response) =>\n            setCountryList(Object.values(response.results).map((x) => x.id))\n          );\n      } else {\n        alert(\n          \"Nie udało się wykonać żądanej operacji, ponieważ nie znaleziono zasobu powiązanego z żądaniem\"\n        );\n      }\n    }\n    fetchCountryList();\n  }, []);\n\n  const handleSubmit = (transaction) => {\n    const conversionDate = convertDate(new Date());\n    getLocalForage().then((conversionsList) => {\n      const newConversionsList = conversionsList.concat({\n        conversionDate,\n        ...transaction,\n      });\n      localForage\n        .setItem(\"savedConversions\", newConversionsList)\n        .then((result) => history.push(\"/history\"));\n    });\n  };\n\n  const handleOpenHistory = () => {\n    history.push(\"/history\");\n  };\n  return (\n    <MainForm\n      listOfCurrencies={countryList.sort()}\n      onSubmit={handleSubmit}\n      openHistory={handleOpenHistory}\n    />\n  );\n}\nexport default Converter;\n","export function convertDate(date) {\n  const current_datetime = new Date(date);\n  return (\n    (current_datetime.getDate() < 10\n      ? \"0\" + current_datetime.getDate()\n      : current_datetime.getDate()) +\n    \".\" +\n    (current_datetime.getMonth() + 1 < 10\n      ? \"0\" + (parseInt(current_datetime.getMonth()) + 1)\n      : current_datetime.getMonth() + 1) +\n    \".\" +\n    current_datetime.getFullYear()\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport History from \"./History\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Converter from \"./Converter\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Col className=\"background\">\n        <Row>\n          <Col className=\"mainTab mt-5 p-3 \">\n            <h1>Konwerter walut</h1>\n            <Converter />\n          </Col>{\" \"}\n          <Switch>\n            <Route path=\"/\" exact>\n              <Col></Col>\n            </Route>\n            <Route path=\"/history\" exact>\n              <History />\n            </Route>\n          </Switch>\n        </Row>\n      </Col>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}