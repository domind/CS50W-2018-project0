{"version":3,"sources":["initData.js","task.js","column.js","App.js","serviceWorker.js","index.js"],"names":["initData","id","title","tasks","content","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","color","boxShadow","borderRadius","Task","key","this","props","item","draggableId","index","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","React","Component","columnStyle","fontWeight","fontSize","textAlign","Column","border","height","column","length","getListStyle2","width","minHeight","droppableId","map","placeholder","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","App","onDragEnd","source","destination","state","setState","slice","sourceColumn","destColumn","colMinHeight","Math","max","window","innerWidth","innerHeight","updateWindowDimensions","bind","addEventListener","removeEventListener","someStyle","Container","Row","Col","direction","type","isDraggingOver","display","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65e4e100.chunk.js","sourcesContent":["export const initData = [\r\n  {\r\n    id: \"col1\",\r\n    title: \"TO DO\",\r\n    tasks: [\r\n      { id: \"task1\", content: \"something to do 1\" },\r\n      { id: \"task2\", content: \"something to do 2\" },\r\n      { id: \"task3\", content: \"something to do 3\" },\r\n      { id: \"task4\", content: \"something to do 4\" },\r\n      { id: \"task5\", content: \"something to do 5\" },\r\n      { id: \"task6\", content: \"something to do 6\" }\r\n    ]\r\n  },\r\n  {\r\n    id: \"col2\",\r\n    title: \"DOING\",\r\n    tasks: [\r\n      { id: \"task7\", content: \"something to do 7\" },\r\n      { id: \"task8\", content: \"something to do 8\" }\r\n    ]\r\n  },\r\n  {\r\n    id: \"col3\",\r\n    title: \"DONE\",\r\n    tasks: [\r\n      { id: \"task9\", content: \"something to do 9\" },\r\n      { id: \"task10\", content: \"something to do 10\" }\r\n    ]\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  // change background colour if dragging\r\n  background: isDragging ? \"Chocolate \" : \"PaleGoldenRod\",\r\n  color: \"blue\",\r\n  boxShadow: \"10px 10px 5px MidnightBlue  \",\r\n  borderRadius: 5,\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nexport default class Task extends React.Component {\r\n  render() {\r\n    return (\r\n      <Draggable\r\n        key={this.props.item.id}\r\n        draggableId={this.props.item.id}\r\n        index={this.props.index}\r\n      >\r\n        {(provided, snapshot) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            style={getItemStyle(\r\n              snapshot.isDragging,\r\n              provided.draggableProps.style\r\n            )}\r\n          >\r\n            {this.props.item.content}\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Task from \"./task\";\r\n\r\nconst grid = 8;\r\n\r\nconst columnStyle = {\r\n  fontWeight: \"bold\",\r\n  fontSize: \"x-large\",\r\n  color: \"PaleGoldenRod \",\r\n  textAlign: \"center\"\r\n};\r\n\r\nexport default class Column extends React.Component {\r\n  render() {\r\n    const getItemStyle = (isDragging, draggableStyle) => ({\r\n      // some basic styles to make the items look a bit nicer\r\n      border: \"solid DarkSlateBlue   \",\r\n\r\n      userSelect: \"none\",\r\n      padding: grid * 2,\r\n      margin: 10,\r\n      boxShadow: \"10px 10px 5px MidnightBlue  \",\r\n      // change background colour if dragging\r\n      background: isDragging ? \"PowderBlue \" : \" CornflowerBlue \",\r\n      borderRadius: 5,\r\n      // styles we need to apply on draggables\r\n      height: 65 * this.props.column.tasks.length + 100,\r\n\r\n      ...draggableStyle\r\n    });\r\n\r\n    const getListStyle2 = {\r\n      // background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n      padding: grid,\r\n      //  border : \"solid\",\r\n      width: 200,\r\n      minHeight: 40\r\n    };\r\n    return (\r\n      <Draggable\r\n        key={this.props.column.id}\r\n        draggableId={this.props.column.id}\r\n        index={this.props.index}\r\n      >\r\n        {(provided, snapshot) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            style={getItemStyle(\r\n              snapshot.isDragging,\r\n              provided.draggableProps.style\r\n            )}\r\n          >\r\n            <Droppable droppableId={\"droppable\" + this.props.index}>\r\n              {(provided, snapshot) => (\r\n                <div>\r\n                  <div style={columnStyle}>{this.props.column.title}</div>\r\n\r\n                  <div ref={provided.innerRef} style={getListStyle2}>\r\n                    {this.props.column.tasks.map((item, index) => (\r\n                      <Task key={index} item={item} index={index} />\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport { initData } from \"./initData\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Column from \"./column\";\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nconst getListStyle = () => ({\r\n  display: \"flex\",\r\n  padding: 5,\r\n  margin: 20,\r\n  color: \"black\"\r\n  //  overflow: \"auto\"\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      column: initData,\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n      colMinHeight: 6\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === \"board\") {\r\n      let column = this.state.column;\r\n      const columnMoved = reorder(\r\n        this.state.column,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      column = columnMoved;\r\n      this.setState({\r\n        column\r\n      });\r\n    } else {\r\n      if (source.droppableId === destination.droppableId) {\r\n        const column = this.state.column;\r\n        const tasks = reorder(\r\n          this.state.column[source.droppableId.slice(9)].tasks,\r\n          result.source.index,\r\n          result.destination.index\r\n        );\r\n        column[source.droppableId.slice(9)].tasks = tasks;\r\n        this.setState({ tasks });\r\n      } else {\r\n        let column = this.state.column;\r\n\r\n        const sourceColumn = Array.from(\r\n          column[source.droppableId.slice(9)].tasks\r\n        ); //source.droppableId.slice(9)\r\n        const destColumn = Array.from(\r\n          column[destination.droppableId.slice(9)].tasks\r\n        );\r\n\r\n        const [removed] = sourceColumn.splice(source.index, 1);\r\n        destColumn.splice(destination.index, 0, removed);\r\n        column[source.droppableId.slice(9)].tasks = sourceColumn;\r\n        column[destination.droppableId.slice(9)].tasks = destColumn;\r\n\r\n        this.setState({\r\n          column\r\n        });\r\n\r\n        this.setState({\r\n          colMinHeight: Math.max(\r\n            ...this.state.column.map(column => column.tasks.length)\r\n          )\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const someStyle = {\r\n      background: \"SteelBlue\",\r\n      minHeight: this.state.height,\r\n      color: \"white\"\r\n    };\r\n\r\n    return (\r\n      <div style={someStyle}>\r\n        <Container>\r\n          <Row>\r\n            <Col style={{ textAlign: \"center\" }}>\r\n              <h1>Testing react-beautiful-dnd</h1>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n              <Droppable\r\n                direction=\"horizontal\"\r\n                droppableId=\"board\"\r\n                type=\"COLUMN\"\r\n              >\r\n                {(provided, snapshot) => (\r\n                  <div>\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      style={getListStyle(snapshot.isDraggingOver)}\r\n                    >\r\n                      {this.state.column.map((column, index) => (\r\n                        <Column\r\n                          key={index}\r\n                          column={column}\r\n                          index={index}\r\n                          colMinHeight={this.state.colMinHeight}\r\n                        />\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </DragDropContext>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}